% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pulse_main.R
\name{PULSE}
\alias{PULSE}
\title{Process PULSE data from a single experiment  (\verb{STEPS 1-4})}
\usage{
PULSE(
  paths,
  discard_channels = NULL,
  window_width_secs,
  window_shift_secs,
  min_data_points,
  interpolation_freq = 40,
  bandwidth = 0.2,
  with_progress = NULL,
  msg = TRUE
)
}
\arguments{
\item{paths}{File paths to CSV files produced by a PULSE system during a single experiment.}

\item{discard_channels}{A string with the names of channels to be discarded from the analysis. The \strong{exact} names must be provided (case sensitive). Discarding unused channels speeds up the workflow!}

\item{window_width_secs}{A single numeric value indicating the width of the time windows (in seconds) over which heart rate frequency will later be computed.}

\item{window_shift_secs}{A single numeric value indicating by how much each subsequent window is shifted from the preceding one (in seconds).}

\item{min_data_points}{A single numeric value, expressed as a ratio \verb{[0, 1]}, used as a threshold to discard windows where data is missing (e.g., if the sampling frequency is \code{20} and \code{window_width_secs = 30}, each window should include \code{600} data points, and so if \code{min_data_points = 0.8}, windows with less than \code{600 * 0.8 = 480} data points will be rejected).}

\item{interpolation_freq}{A numeric value expressing the frequency (in Hz) to which PULSE data should be interpolated. Can be set to \code{0} (zero) or any value equal or greater than \code{40} (the default). If set to zero, no interpolation is performed.}

\item{bandwidth}{A numeric value expressing the bandwidth. If equal to \code{0} (zero) no smoothing is applied. Ideally kept low (defaults to \code{0.2}) so that only very high frequency noise is removed, but can be pushed up all the way to \code{1} or above (especially when the heartbeat rate is expected to be slow, as is typical of oysters, but double check the resulting data). Type \code{?ksmooth} for additional info.}

\item{with_progress}{One of \code{TRUE}, \code{FALSE} or \code{NULL} (default) to choose whether to show progress bars or not (based on the \code{progressr} package). \code{TRUE} prints a \code{cli}-style progress bar; \code{FALSE} disables progress bars altogether; if set to \code{NULL}, the behavior is controlled by the user from outside this function (by setting the desired \code{handlers()}; in addition, setting \code{handlers(global = TRUE)} ensures the same behavior is used across the entire session).}

\item{msg}{A logical to decide if non-crucial messages (but not errors) are shown (defaults to \code{TRUE})}
}
\value{
A tibble with nrows = (number of channels) * (number of windows in \code{pulse_data_split}) and 6 columns:
\itemize{
\item \code{id}, PULSE channel IDs
\item \code{time}, time at the center of each time window
\item \code{data}, a list of tibbles with raw PULSE data for each combination of channel and window, with columns \code{time}, \code{val} and \code{peak} (\code{TRUE} in rows corresponding to wave peaks)
\item \code{n}, number of wave peaks identified
\item \code{hz}, heartbeat rate estimate (in Hz)
\item \code{sd}, standard deviation of the intervals between wave peaks
}
}
\description{
\strong{ALL STEPS EXECUTED SEQUENTIALLY}
\itemize{
\item \verb{step 1} -- \code{\link[=pulse_read]{pulse_read()}}
\item \verb{step 2} -- \code{\link[=pulse_split]{pulse_split()}}
\item \verb{step 3} -- \code{\link[=pulse_optimize]{pulse_optimize()}}
\item \verb{step 4} -- \code{\link[=pulse_heart]{pulse_heart()}}
\item \verb{extra step} -- \code{\link[=pulse_summarise]{pulse_summarise()}}
}

This is a wrapper function that provides a shortcut to running all 4 steps of the PULSE multi-channel data processing pipeline in sequence, namely \code{pulse_read()} >> \code{pulse_split()} >> \code{pulse_optimize()} >> \code{pulse_heart()}.

\strong{IMPORTANT NOTE}: \code{\link[=pulse_summarise]{pulse_summarise()}} is not included in \code{\link[=PULSE]{PULSE()}} because it isn't essential for the PULSE data processing pipeline. However, in many instances it's important to run the output from \code{\link[=PULSE]{PULSE()}} through \code{pulse_summarise()} before analysing the hearbeat rate data. This is because certain combinations of parameters may result in too many data points (leading to oversampling), a situation that can be resolved with \code{pulse_summarise()}. Be sure to check its help file (\code{?pulse_summarise}) before processing any large PULSE datasets, to understand the two main strategies that can be employed to handle oversampling and reduce sensitivity to pockets of poor-quality data across a dataset.

\code{PULSE()} takes a vector of \code{paths} to PULSE csv files produced by a PULSE multi-channel system during \strong{a single experiment} and automatically computes the heartbeat frequencies in all target channels across use-defined time windows. The entire workflow may take less than 5 minutes to run on a small dataset (a few hours of data) if (1) \code{params} are chosen with speed in mind, (2) parallel computing is enabled and (3) the code is run on a modern machine. Conversely, large datasets (spanning several days) may take hours or even days to run.
}
\section{One experiment}{

The PULSE workflow must be applied to a single experiment each time. By \emph{experiment} we mean a collection of PULSE data where all the relevant parameters are invariant, including (but not limited):
\itemize{
\item the version of the firmware installed in the PULSE multi-channel
\item the names of all channels (including unused channels)
\item the frequency at which data was captured
}

Note also that even if two PULSE systems have been used in the same \emph{scientific experiment}, data from each device must be processed independently, and only merged at the end. There's no drawback in doing so, it just is important to understand that that's how data must be processed by the \code{\link{heartbeatr-package}}.
}

\section{Additional details}{

Check the helpfiles of the underlying functions to obtain additional details about each of the steps implemented under \code{PULSE()}, namely:
\itemize{
\item \code{\link[=pulse_read]{pulse_read()}} describes constraints to the type of files that can be read with the \code{\link{heartbeatr-package}}.
\item \code{\link[=pulse_split]{pulse_split()}} provides important advice to set \code{window_width_secs} and \code{window_shift_secs}, and what to expect when lower/higher values are used.
\item \code{\link[=pulse_optimize]{pulse_optimize()}} explains in detail how the optimization process (interpolation + smoothing) behaves and how it impacts the performance of the analysis.
\item \code{\link[=pulse_heart]{pulse_heart()}} outlines the algorithm used to robustely identify peaks in the heartbeat wave data and some of its limitations.
}

Also check \code{\link[=pulse_summarise]{pulse_summarise()}} for important info about oversampling and strategies to handle it while processing PULSE data with the \code{\link{heartbeatr-package}}.
}

\examples{
# Begin prepare data ----
paths <- pulse_example("RAW_original_")
# End prepare data ----

# Execute the entire PULSE data processing pipeline with only one call
PULSE(
  paths,
  discard_channels  = paste0("s", 5:10),
  window_width_secs = 30,
  window_shift_secs = 60,
  min_data_points   = 0.8,
  interpolation_freq = 40,
  bandwidth   = 0.2,
  with_progress = TRUE
  )
}
\seealso{
\itemize{
\item check \code{\link[progressr:handlers]{progressr::handlers()}} to customize the reporting of progress
\item check \code{\link[future:plan]{future::plan()}} to optimize parallel processing
\item \code{\link[=approx]{approx()}} is used by \code{\link[=pulse_interpolate]{pulse_interpolate()}} for the linear interpolation of PULSE data
\item \code{\link[=ksmooth]{ksmooth()}} is used by \code{\link[=pulse_smooth]{pulse_smooth()}} for the kernel smoothing of PULSE data
\item \code{\link[=pulse_read]{pulse_read()}}, \code{\link[=pulse_split]{pulse_split()}}, \code{\link[=pulse_optimize]{pulse_optimize()}} and \code{\link[=pulse_heart]{pulse_heart()}} are the functions needed for the complete PULSE processing workflow
\item \code{\link[=pulse_summarise]{pulse_summarise()}} can be used to reduce the number of data points returned
}
}
